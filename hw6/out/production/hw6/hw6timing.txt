1a. Results for InsertRandomSpeedTest for N = 1000000:
      BSTStringSet: 2.00s, ECHasStringSet: 1.33s
       treeset: 1.65s Hashset: 0.71

1b. Results for InsertRandomSpeedTest for N = 2000000:
    bststringset = 4.36 s; echashset: 3.68s
    treeset = 3.83s and hashet = 1.82s


1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
    I think it is roughly quadratic

2a. Results for InsertInOrderSpeedTest for N = 10000:
    1.68s for bst, 0.01 for ec, 0.03 for tree, 0.01 for hash

2b. Results for InsertInOrderSpeedTest for N = 20000:
    3.25 for bst, 0.06 for echash, 0.07 for tree, 0.04 for hash

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
    I think it's roughly linear.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

