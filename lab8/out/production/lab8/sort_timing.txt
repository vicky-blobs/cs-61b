Q: Is one sorting algorithm always faster than another?
A: CountingSorter seems to be the fastest everytime.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: I think it is due to the efficiency of sorting, causing BubbleSort to run through the loops more compared to the other two, and making it slower.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: We are able to see exactly which ones are faster, since in the previous question, we knew the three had the same time complexity.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Yes?

Q: How does changing nrepeats change the plot?
A: Increase in nrepeats gives us a more accurate drawing of how long it takes to sort N length array.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, it changes every time even with the same values.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: